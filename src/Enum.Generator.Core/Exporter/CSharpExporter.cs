using System;
using System.Reflection;
using System.Text.RegularExpressions;

using Enum.Generator.Core.Definition;
using Enum.Generator.Core.Exporter.Exceptions;
using Enum.Generator.Core.Utilities;

namespace Enum.Generator.Core.Exporter
{
    /// <summary>
    /// Exporter for creating c# source-code.
    /// </summary>
    public static class CSharpExporter
    {
        /// <summary>
        /// Create c# source-code representation of a <see cref="EnumDefinition"/>.
        /// </summary>
        /// <exception cref="Exceptions.InvalidNamespaceException">
        /// Thrown when a invalid namespace identifier is given.
        /// </exception>
        /// <param name="enumDefinition">Enum to generate c# source-code for</param>
        /// <param name="namespace">Namespace to add the enum to</param>
        /// <param name="indentMode">Mode to use for indenting</param>
        /// <param name="spaceIndentSize">When indenting with spaces this controls how many</param>
        /// <param name="newlineMode">Mode to use for ending lines</param>
        /// <returns>String containing the genenerated c# sourcecode</returns>
        public static string Export(
            this EnumDefinition enumDefinition,
            string @namespace,
            CodeBuilder.IndentMode indentMode = CodeBuilder.IndentMode.Spaces,
            int spaceIndentSize = 4,
            CodeBuilder.NewlineMode newlineMode = CodeBuilder.NewlineMode.Unix)
        {
            if (enumDefinition == null)
                throw new ArgumentNullException(nameof(enumDefinition));

            if (!IdentifierValidator.ValidateNamespace(@namespace))
                throw new InvalidNamespaceException(@namespace);

            var assemblyName = typeof(CSharpExporter).Assembly.GetName();
            var builder = new CodeBuilder(indentMode, spaceIndentSize, newlineMode);
            builder.AddHeader(assemblyName);
            builder.WriteEmptyLine();
            builder.WriteLine("using System.CodeDom.Compiler;");
            builder.WriteEmptyLine();
            builder.WriteLine($"namespace {@namespace}");
            builder.StartScope();
            {
                if (!string.IsNullOrEmpty(enumDefinition.Comment))
                    builder.AddSummary(enumDefinition.Comment);
                builder.WriteLine($"[GeneratedCode(\"{assemblyName.Name}\", \"{assemblyName.Version}\")]");
                builder.WriteLine($"public enum {enumDefinition.Identifier}");
                builder.StartScope();
                {
                    var first = true;
                    foreach (var entry in enumDefinition.Entries)
                    {
                        if (!first)
                            builder.WriteEmptyLine();
                        first = false;

                        if (!string.IsNullOrEmpty(entry.Comment))
                            builder.AddSummary(entry.Comment);
                        builder.WriteLine($"{entry.Name} = {entry.Value},");
                    }
                }

                builder.EndScope();
            }

            builder.EndScope();

            return builder.Build();
        }

        private static void StartScope(this CodeBuilder builder)
        {
            builder.WriteLine("{");
            builder.BeginIndent();
        }

        private static void EndScope(this CodeBuilder builder)
        {
            builder.EndIndent();
            builder.WriteLine("}");
        }

        private static void AddSummary(this CodeBuilder builder, string text)
        {
            if (string.IsNullOrEmpty(text))
                throw new ArgumentException($"Invalid text: '{text}'", nameof(text));

            // Strip newlines from the text. (At the moment only single line summaries are supported).
            text = Regex.Replace(text, "(\n|\r)+", " ");

            builder.WriteLine("/// <summary>");
            builder.WriteLine($"/// {text}");
            builder.WriteLine("/// </summary>");
        }

        private static void AddHeader(this CodeBuilder builder, AssemblyName assemblyName)
        {
            builder.WriteLine("//------------------------------------------------------------------------------");
            builder.WriteLine("<auto-generated>", prefix: "// ");
            builder.WriteLine($"Generated by: {assemblyName.Name} - {assemblyName.Version}", prefix: "// ", additionalIndent: 1);
            builder.WriteLine("</auto-generated>", prefix: "// ");
            builder.WriteLine("//------------------------------------------------------------------------------");
        }
    }
}
