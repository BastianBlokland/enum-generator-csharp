using Xunit;

using EnumGenerator.Core.Builder;
using EnumGenerator.Core.Exporter;
using EnumGenerator.Core.Exporter.Exceptions;

namespace EnumGenerator.Tests.Builder
{
    public sealed class FSharpExporterTests
    {
        private const string Version = "5.0.0.0";

        [Fact]
        public void ThrowsIfExportedWithInvalidNamespace() => Assert.Throws<InvalidNamespaceException>(() =>
        {
            var builder = new EnumBuilder("TestEnum");
            builder.PushEntry("A", 1);
            var enumDef = builder.Build();

            enumDef.ExportFSharp(@namespace: "0Test");
        });

        [Fact]
        public void ThrowsIfExportedWithOutOfBoundsValue() => Assert.Throws<OutOfBoundsValueException>(() =>
        {
            var builder = new EnumBuilder("TestEnum");
            builder.PushEntry("A", -1);
            var enumDef = builder.Build();

            enumDef.ExportFSharp(@namespace: "Test", storageType: StorageType.Unsigned8Bit);
        });

        [Fact]
        public void BasicEnumIsExported()
        {
            var builder = new EnumBuilder("TestEnum");
            builder.PushEntry("A", 1);
            builder.PushEntry("B", 2);
            var enumDef = builder.Build();

            var export = enumDef.ExportFSharp(@namespace: "Test");

            Assert.Equal(
                expected:
$@"//------------------------------------------------------------------------------
// <auto-generated>
//     Generated by: EnumGenerator.Core - {Version}
// </auto-generated>
//------------------------------------------------------------------------------

namespace Test

open System.CodeDom.Compiler

[<GeneratedCode(""EnumGenerator.Core"", ""{Version}"")>]
type TestEnum =
    | A = 1
    | B = 2
",
                actual: export);
        }

        [Fact]
        public void NegativeValuesAreExported()
        {
            var builder = new EnumBuilder("TestEnum");
            builder.PushEntry("A", -1);
            builder.PushEntry("B", -2);
            var enumDef = builder.Build();

            var export = enumDef.ExportFSharp(@namespace: "Test");

            Assert.Equal(
                expected:
$@"//------------------------------------------------------------------------------
// <auto-generated>
//     Generated by: EnumGenerator.Core - {Version}
// </auto-generated>
//------------------------------------------------------------------------------

namespace Test

open System.CodeDom.Compiler

[<GeneratedCode(""EnumGenerator.Core"", ""{Version}"")>]
type TestEnum =
    | A = -1
    | B = -2
",
                actual: export);
        }

        [Fact]
        public void CommentsAreExported()
        {
            var builder = new EnumBuilder("TestEnum");
            builder.Comment = "Summary comment.";
            builder.PushEntry("A", 1, "This is entry A.");
            builder.PushEntry("B", 2, "This is entry B.");
            var enumDef = builder.Build();

            var export = enumDef.ExportFSharp(@namespace: "Test");

            Assert.Equal(
                expected:
$@"//------------------------------------------------------------------------------
// <auto-generated>
//     Generated by: EnumGenerator.Core - {Version}
// </auto-generated>
//------------------------------------------------------------------------------

namespace Test

open System.CodeDom.Compiler

/// <summary>
/// Summary comment.
/// </summary>
[<GeneratedCode(""EnumGenerator.Core"", ""{Version}"")>]
type TestEnum =
    | A = 1
    | B = 2
",
                actual: export);
        }

        [Fact]
        public void CanBeExportedWithLessSpaces()
        {
            var builder = new EnumBuilder("TestEnum");
            builder.PushEntry("A", 1);
            builder.PushEntry("B", 2);
            var enumDef = builder.Build();

            var export = enumDef.ExportFSharp(@namespace: "Test", indentSize: 2);

            Assert.Equal(
                expected:
$@"//------------------------------------------------------------------------------
// <auto-generated>
//   Generated by: EnumGenerator.Core - {Version}
// </auto-generated>
//------------------------------------------------------------------------------

namespace Test

open System.CodeDom.Compiler

[<GeneratedCode(""EnumGenerator.Core"", ""{Version}"")>]
type TestEnum =
  | A = 1
  | B = 2
",
                actual: export);
        }

        [Fact]
        public void StorageTypeIsExported()
        {
            var builder = new EnumBuilder("TestEnum");
            builder.PushEntry("A", 1);
            builder.PushEntry("B", 2);
            var enumDef = builder.Build();

            var export = enumDef.ExportFSharp(@namespace: "Test", storageType: StorageType.Unsigned8Bit);

            Assert.Equal(
                expected:
$@"//------------------------------------------------------------------------------
// <auto-generated>
//     Generated by: EnumGenerator.Core - {Version}
// </auto-generated>
//------------------------------------------------------------------------------

namespace Test

open System.CodeDom.Compiler

[<GeneratedCode(""EnumGenerator.Core"", ""{Version}"")>]
type TestEnum =
    | A = 1uy
    | B = 2uy
",
                actual: export);
        }

        [Fact]
        public void CanBeExportedWithoutHeader()
        {
            var builder = new EnumBuilder("TestEnum");
            builder.PushEntry("A", 1);
            builder.PushEntry("B", 2);
            var enumDef = builder.Build();

            var export = enumDef.ExportFSharp(@namespace: "Test", headerMode: HeaderMode.None);

            Assert.Equal(
                expected:
$@"namespace Test

open System.CodeDom.Compiler

[<GeneratedCode(""EnumGenerator.Core"", ""{Version}"")>]
type TestEnum =
    | A = 1
    | B = 2
",
                actual: export);
        }
    }
}
